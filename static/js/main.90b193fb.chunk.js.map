{"version":3,"sources":["logo.svg","component/atoms/GoodBtn.jsx","component/atoms/BadBtn.jsx","component/molecules/GenderRadioBtnGroup.jsx","App.js","reportWebVitals.js","index.js"],"names":["GoodBtn","props","useState","count","counter","countUp","useEffect","el","document","getElementById","addEventListener","removeEventListener","IconButton","id","aria-label","BadBtn","GenderRadioBtnGroup","React","value","setValue","FormControl","component","FormLabel","RadioGroup","name","onChange","event","target","FormControlLabel","control","Radio","label","App","theme","createMuiTheme","palette","type","ThemeProvider","CssBaseline","Grid","container","direction","justify","alignItems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"kNAAe,I,6CCyCAA,EAlCC,SAACC,GAAU,MAOAC,mBAAS,GAPT,mBAOlBC,EAPkB,KAOXC,EAPW,KAQnBC,EAAU,WACdD,EAAQD,EAAQ,IAiBlB,OARAG,qBAAU,WACR,IAAMC,EAAKC,SAASC,eAAe,YAEnC,OADAF,EAAGG,iBAAiB,QAASL,GACtB,WACLE,EAAGI,oBAAoB,QAASN,OAKlC,eAACO,EAAA,EAAD,CAAYC,GAAI,WAAYC,aAAW,OAAvC,UACE,cAAC,IAAD,IACCX,M,iBCKQY,EAlCA,SAACd,GAAU,MAOCC,mBAAS,GAPV,mBAOjBC,EAPiB,KAOVC,EAPU,KAQlBC,EAAU,WACdD,EAAQD,EAAQ,IAiBlB,OARAG,qBAAU,WACR,IAAMC,EAAKC,SAASC,eAAe,WAEnC,OADAF,EAAGG,iBAAiB,QAASL,GACtB,WACLE,EAAGI,oBAAoB,QAASN,OAKlC,eAACO,EAAA,EAAD,CAAYC,GAAI,UAAWC,aAAW,MAAtC,UACE,cAAC,IAAD,IACCX,M,wCChBQa,EAjBa,WAAO,IAAD,EACJC,IAAMf,SAAS,QADX,mBACvBgB,EADuB,KAChBC,EADgB,KAO9B,OACI,eAACC,EAAA,EAAD,CAAaC,UAAU,WAAvB,UACI,cAACC,EAAA,EAAD,CAAWD,UAAU,SAArB,0BACA,eAACE,EAAA,EAAD,CAAYT,aAAW,SAASU,KAAK,SAASN,MAAOA,EAAOO,SAP/C,SAACC,GAClBP,EAASO,EAAMC,OAAOT,QAMlB,UACI,cAACU,EAAA,EAAD,CAAkBV,MAAM,OAAOW,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,mCACzD,cAACH,EAAA,EAAD,CAAkBV,MAAM,SAASW,QAAS,cAACC,EAAA,EAAD,IAAWC,MAAM,0C,gCC2B5DC,MAnCf,WACE,IAAMC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,KAAM,UAIV,OACE,eAACC,EAAA,EAAD,CAAeJ,MAAOA,EAAtB,UACE,cAACK,EAAA,EAAD,IACA,8BACE,iCACE,cAACC,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,SACVC,QAAQ,SACRC,WAAW,SAJb,SAME,cAAC,EAAD,MAEF,eAACJ,EAAA,EAAD,CACEC,WAAS,EACTC,UAAU,MACVC,QAAQ,SACRC,WAAW,SAJb,UAME,cAAC,EAAD,IACA,cAAC,EAAD,gBCtBGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/C,SAASC,eAAe,SAM1BmC,M","file":"static/js/main.90b193fb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useState, useEffect } from 'react';\r\nimport ThumbUpOutlinedIcon from '@material-ui/icons/ThumbUpOutlined';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\n/**\r\n * GOODボタン コンポーネント\r\n */\r\nconst GoodBtn = (props) => {\r\n\r\n  /**\r\n   * @name state hook\r\n   * @details 状態管理をする @n\r\n   * メンバー変数を定義して、その値を書き換える関数を定義するみたいなとこ\r\n   */\r\n  const [count, counter] = useState(0);\r\n  const countUp = () => {\r\n    counter(count + 1)\r\n  }\r\n\r\n  /**\r\n   * @name effect hook\r\n   * @details ライフサイクルを管理する @n\r\n   * コンストラクタ, 更新, デストラクタで行う処理を定義するみたいなとこ\r\n   * @attention デストラクタは毎回走る\r\n   */\r\n  useEffect(() => {\r\n    const el = document.getElementById('good_btn');\r\n    el.addEventListener('click', countUp);\r\n    return () => {\r\n      el.removeEventListener('click', countUp)\r\n    }\r\n  });\r\n\r\n  return (\r\n    <IconButton id={\"good_btn\"} aria-label=\"good\">\r\n      <ThumbUpOutlinedIcon />\r\n      {count}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default GoodBtn;","import React, { useState, useEffect } from 'react';\r\nimport ThumbDownOutlinedIcon from '@material-ui/icons/ThumbDownOutlined';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\n/**\r\n * BADボタン コンポーネント\r\n */\r\nconst BadBtn = (props) => {\r\n\r\n  /**\r\n   * @name state hook\r\n   * @details 状態管理をする @n\r\n   * メンバー変数を定義して、その値を書き換える関数を定義するみたいなとこ\r\n   */\r\n  const [count, counter] = useState(0);\r\n  const countUp = () => {\r\n    counter(count + 1)\r\n  }\r\n\r\n  /**\r\n   * @name effect hook\r\n   * @details ライフサイクルを管理する @n\r\n   * コンストラクタ, 更新, デストラクタで行う処理を定義するみたいなとこ\r\n   * @attention デストラクタは毎回走る\r\n   */\r\n  useEffect(() => {\r\n    const el = document.getElementById('bad_btn');\r\n    el.addEventListener('click', countUp);\r\n    return () => {\r\n      el.removeEventListener('click', countUp)\r\n    }\r\n  });\r\n\r\n  return (\r\n    <IconButton id={\"bad_btn\"} aria-label=\"bad\">\r\n      <ThumbDownOutlinedIcon />\r\n      {count}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default BadBtn;","import React, {useState } from 'react';\r\nimport { FormControl, FormControlLabel, FormLabel, RadioGroup, Radio } from '@material-ui/core';\r\n\r\nconst GenderRadioBtnGroup = () => {\r\n    const [value, setValue] = React.useState('male');\r\n\r\n    const handleChange = (event) => {\r\n        setValue(event.target.value);\r\n    };\r\n\r\n    return (\r\n        <FormControl component=\"fieldset\">\r\n            <FormLabel component=\"legend\">性別</FormLabel>\r\n            <RadioGroup aria-label=\"gender\" name=\"gender\" value={value} onChange={handleChange}>\r\n                <FormControlLabel value=\"male\" control={<Radio />} label=\"おとこの子\" />\r\n                <FormControlLabel value=\"female\" control={<Radio />} label=\"おんなの子\" />\r\n            </RadioGroup>\r\n        </FormControl>\r\n    );\r\n}\r\nexport default GenderRadioBtnGroup;","import logo from './logo.svg';\nimport './App.css';\nimport GoodBtn from './component/atoms/GoodBtn.jsx';\nimport BadBtn from './component/atoms/BadBtn.jsx';\nimport GenderRadioBtnGroup from './component/molecules/GenderRadioBtnGroup.jsx';\nimport { createMuiTheme, CssBaseline, Grid, ThemeProvider } from '@material-ui/core';\n\nfunction App() {\n  const theme = createMuiTheme({\n    palette: {\n      type: 'dark',\n      // type: 'light',\n    }\n  })\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <div>\n        <body>\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <GenderRadioBtnGroup />\n          </Grid>\n          <Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <GoodBtn />\n            <BadBtn />\n          </Grid>\n        </body>\n      </div>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}